#Este Secret serve para armazenar credenciais de acesso ao banco de dados (DB_USER e DB_PASSWORD) de forma segura e separada do código-fonte da aplicação backend.
#Segurança: evita hardcode de senhas no Deployment.
#Flexibilidade: permite alterar credenciais sem editar imagens ou arquivos de configuração do container.
#Boa prática DevOps: promove configuração externa, seguindo o conceito de 12-Factor App.

apiVersion: v1  # Versão da API do Kubernetes usada para definir o recurso.
kind: Secret  # Tipo do recurso. Aqui, um Secret, usado para armazenar dados sensíveis.
metadata:
  name: backend-secrets  # Nome do Secret. Usado para referenciar dentro de pods/deployments.
  namespace: app  # Namespace onde o Secret está alocado, isolando seu escopo ao contexto da aplicação.

type: Opaque  # Tipo genérico de Secret, indicado para dados arbitrários codificados em base64.

data:
  DB_USER: cG9zdGdyZXM=  # Valor codificado em Base64 para 'postgres' (usuário do banco de dados).
  DB_PASSWORD: cG9zdGdyZXM=  # Valor codificado em Base64 para 'postgres' (senha do banco de dados).

#Por que não misturar Secrets no ConfigMap?
#Segurança: ConfigMap é armazenado em texto claro, e qualquer usuário com acesso ao cluster pode ler seu conteúdo sem restrições.
#Boas práticas Kubernetes: Senhas devem ser isoladas e gerenciadas separadamente, com controle de acesso.
#Auditoria: Fica mais claro identificar e restringir quem acessa dados críticos.
###################ConfigMap não suporta codificação em Base64 nativamente nem tem finalidade de armazenar dados sensíveis.################
